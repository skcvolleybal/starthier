services:

  # MySQL Database shared between WordPress, Team-Portal, and TC-App
  db:
    # build: mysql
    image: mysql:5.7
    platform: linux/x86_64/v8
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    volumes:
      - db_data:/var/lib/mysql
      - ./team-portal/php/scripts/Seeder_data.sql:/docker-entrypoint-initdb.d/Seeder_data.sql # Very nice. If this container is started with an empty volume, Docker mounts the .sql file in docker-entrypoint-initdb.d and MySQL wil automatically execute any SQL file in this directory. So the database is seeded automatically. 
      - ./tc-app/database_install.sql:/docker-entrypoint-initdb.d/database_install.sql # 
    ports: 
      - "3306:3306"  # Expose MySQL port to the host


  # Apache web server with WordPress
  wordpress:
    image: wordpress:php8.1
    container_name: wordpress
    depends_on:
      - db
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    volumes:
      - ./wordpress_data:/var/www/html

  # WP-CLI container
  wpcli:
    image: wordpress:cli
    container_name: wpcli
    depends_on:
      - wordpress
      - team-portal-frontend
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    volumes:
      - ./wordpress_data:/var/www/html
    entrypoint: >
      sh -c "
        sleep 15 &&
        wp core install --url='http://localhost:8080' --title='SKC Volleybal Dev Site' --admin_user='admin' --admin_password='secret123' --admin_email='webcie@skcvolleybal.nl' --path='/var/www/html' --skip-email &&
        wp option update blogdescription 'Development site for SKC Volleybal'

        # Ensure required plugins are installed and activated
        wp plugin is-installed pods --path=/var/www/html --allow-root ||
        wp plugin install pods --activate --path=/var/www/html --allow-root &&
        wp plugin is-installed members --path=/var/www/html --allow-root ||
        wp plugin install members --activate --path=/var/www/html --allow-root &&

        # Create custom roles only if they don't already exist
        wp role list --allow-root --path=/var/www/html | grep -q 'beheerder' || wp role create beheerder 'Beheerder' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'barcie' || wp role create barcie 'Barcie' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'bestuur' || wp role create bestuur 'Bestuur' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'commissieco' || wp role create commissieco 'CommissieCo' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'customer' || wp role create customer 'Customer' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'lustrumcie' || wp role create lustrumcie 'LustrumCie' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'paparazcie' || wp role create paparazcie 'PaparazCie' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'scheidsco' || wp role create scheidsco 'ScheidsCo' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'vendor' || wp role create vendor 'Vendor' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'shop' || wp role create shop 'Shop' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'abonnee' || wp role create abonnee 'Abonnee' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'tc' || wp role create tc 'TC' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'teamcoordinator' || wp role create teamcoordinator 'Teamcoordinator' --allow-root --path=/var/www/html &&
        wp role list --allow-root --path=/var/www/html | grep -q 'webcie' || wp role create webcie 'WebCie' --allow-root --path=/var/www/html &&
      
        #  # Create the custom Pod 'Team'
        # wp pods add --pod=team --label='Teams' --description='A Pod to store teams' --rest-enable=1 --allow-root --path=/var/www/html &&
        
        # # Create the field 'Leden' in the 'Team' Pod which references multiple Users
        # wp pods field add --pod=team --field_name=leden --type=pick --pick_object=user --pick_format_type=multi --pick_show_icon=1 --pick_show_edit_link=1 --pick_show_view_link=1 --allow-root --path=/var/www/html &&
        
        # # Create the field 'Team' in the 'User' Pod that references a single Team
        # wp pods field add --pod=user --field_name=team --type=pick --pick_object=team --pick_format_type=single --pick_show_icon=1 --pick_show_edit_link=1 --pick_show_view_link=1 --allow-root --path=/var/www/html &&

        # # Optionally add a few example Team items with Leden
        # wp pods add --pod=team --leden=1 --allow-root --path=/var/www/html &&
        # wp pods add --pod=team --leden=2 --allow-root --path=/var/www/html &&
        # wp pods add --pod=team --leden=3 --allow-root --path=/var/www/html &&
        
        # # Optionally, link some Users to a Team
        # wp pods save --pod=user --item=1 --team=1 --allow-root --path=/var/www/html &&
        # wp pods save --pod=user --item=2 --team=1 --allow-root --path=/var/www/html &&
        # wp pods save --pod=user --item=3 --team=2 --allow-root --path=/var/www/html

        wp pods pod add --type=post_type --name=team --allow-root

      "

  # Team Portal Service (PHP & Angular)
  team-portal-frontend:
    build:
      context: ./team-portal
      dockerfile: ./Dockerfile-frontend #  Dockerfile exists in the repo
    container_name: team-portal-frontend
    depends_on:
      - team-portal-tc-app-backend
    ports:
      - "4200:4200" 
    volumes:
      - ./team-portal:/app
      - /app/node_modules # Anonymous volume for node_modules, so we don't overwrite the node_modules in the container
      

  team-portal-tc-app-backend:
    image: webdevops/php-apache-dev:8.1
    container_name: team-portal-tc-app-backend
    depends_on:
      - db
    ports:
      - 80:80
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    volumes:
      - ./wordpress_data:/app/
      - ./team-portal:/app/team-portal/
      - ./team-portal/php/.env.example:/app/team-portal/php/.env
      - ./tc-app:/app/tc-app/
      - ./tc-app/.env.example:/app/tc-app/.env
    command: bash -c "
      cd /app/team-portal/php && composer install &&
      cd /app/tc-app && composer install &&
      /usr/bin/supervisord -c /opt/docker/etc/supervisor.conf"

  tc-app-frontend:
    build:
      context: ./tc-app
      dockerfile: Dockerfile 
    container_name: tc-app-frontend
    depends_on:
      - team-portal-tc-app-backend
    ports:
      - "8888:80"  # Expose port 80
    volumes:
      - ./tc-app:/var/www/html
      - /var/www/html/node_modules # Anonymous volume for node_modules, so we don't overwrite the node_modules in the container

    # environment:
      # Add environment variables here if needed
      # NODE_ENV: development
      

volumes:
  db_data:

