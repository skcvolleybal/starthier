@REM THIS HAS NOT BEEN TESTED
@REM IT'S A CHATGPT COPY OF MAC_SETUP.SH

# Define Variables
$TARGET_DIR = "C:\xampp\htdocs"
$WORDPRESS_DB_NAME = "wordpress_db"
$DB_USER = "root"
$DB_PASSWORD = "password"
$DB_HOST = "127.0.0.1"
$WP_URL = "http://localhost/"
$WP_TITLE = "SKC WORDPRESS DEV SITE"
$WP_ADMIN_USER = "admin"
$WP_ADMIN_PASS = "password"
$WP_ADMIN_EMAIL = "webcie@skcvolleybal.nl"

$TEAMPORTAL_DB_NAME = "teamportal_db"
$TCAPP_DB_NAME = "tcapp_db"

$XAMPP_NAME = "xampp-windows-x64-8.2.4-0-installer"
$EXE_NAME = "$XAMPP_NAME.exe"
$INSTALLER_URL = "https://sourceforge.net/projects/xampp/files/XAMPP%20Windows%20X64/8.2.4/$EXE_NAME"
$XAMPP_INSTALL_DIRECTORY = "C:\xampp"

# Function to Install Chocolatey (Package Manager for Windows)
function Install-Chocolatey {
    iex "& { $(irm https://chocolatey.org/install.ps1 -UseBasicP) }"
    Write-Output "Chocolatey installed"
}

# Function to Check if XAMPP is Present
function Is-XAMPP-Present {
    if (Test-Path $XAMPP_INSTALL_DIRECTORY -and (Get-ChildItem $XAMPP_INSTALL_DIRECTORY | Measure-Object).Count -gt 0) {
        Write-Output "XAMPP already detected at $XAMPP_INSTALL_DIRECTORY."
        return $true
    } else {
        Write-Output "XAMPP not found or directory is empty."
        return $false
    }
}

# Function to Install XAMPP
function Install-XAMPP {
    if (Is-XAMPP-Present) {
        Write-Output "XAMPP is already installed."
    } else {
        Write-Output "Downloading XAMPP..."
        Invoke-WebRequest -Uri $INSTALLER_URL -OutFile $EXE_NAME

        Write-Output "Installing XAMPP..."
        Start-Process -FilePath $EXE_NAME -ArgumentList "/S" -Wait

        Write-Output "XAMPP installation completed."
    }
}

# Function to Set MySQL Root Password
function Set-MySQLRootPassword {
    Write-Output "Setting MySQL root password..."
    & "$XAMPP_INSTALL_DIRECTORY\mysql\bin\mysql.exe" -u$DB_USER -p$DB_PASSWORD -e "ALTER USER '$DB_USER'@'$DB_HOST' IDENTIFIED BY '$DB_PASSWORD'; FLUSH PRIVILEGES;"
    if ($?) {
        Write-Output "MySQL root password changed to $DB_PASSWORD"
    } else {
        Write-Output "Failed to change MySQL root password!"
    }
}

# Function to Install Node, Composer, and WP CLI
function Setup-Node-Composer-WPCLI {
    choco install nodejs-lts
    choco install composer
    Invoke-WebRequest -Uri https://github.com/wp-cli/wp-cli/releases/download/v2.8.0/wp-cli.phar -OutFile "$env:ProgramFiles\wp-cli.phar"
    [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$env:ProgramFiles", [EnvironmentVariableTarget]::Machine)

    Write-Output "Node, Composer, and WP CLI installed."
}

# Function to Download and Setup WordPress
function Download-WordPress-And-Plugins {
    Set-Location -Path $TARGET_DIR
    Write-Output "Downloading WordPress..."
    Invoke-WebRequest -Uri https://wordpress.org/latest.zip -OutFile "latest.zip"
    Write-Output "Unzipping WordPress..."
    Expand-Archive -Path "latest.zip" -DestinationPath $TARGET_DIR -Force
    Remove-Item -Path "latest.zip"

    Write-Output "Downloading Pods plugin..."
    Invoke-WebRequest -Uri https://downloads.wordpress.org/plugin/pods.latest-stable.zip -OutFile "pods.zip"
    Write-Output "Unzipping Pods plugin..."
    Expand-Archive -Path "pods.zip" -DestinationPath "$TARGET_DIR\wp-content\plugins" -Force
    Remove-Item -Path "pods.zip"

    Write-Output "WordPress with Pods plugin installed in $TARGET_DIR"
}

# Function to Create MySQL Database
function Create-Database {
    param (
        [string]$dbName
    )
    Write-Output "Creating database $dbName..."
    & "$XAMPP_INSTALL_DIRECTORY\mysql\bin\mysql.exe" -u$DB_USER -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $dbName;"
    if ($?) {
        Write-Output "Database '$dbName' created successfully."
    } else {
        Write-Output "Failed to create database."
    }
}

# Function to Setup wp-config.php
function Setup-WPConfigFile {
    Set-Location -Path $TARGET_DIR
    if (-Not (Test-Path "wp-config.php")) {
        Copy-Item -Path "wp-config-sample.php" -Destination "wp-config.php"
        Write-Output "wp-config.php created from sample."
    }

    Write-Output "Configuring WordPress database settings..."
    (Get-Content "wp-config.php") -replace "database_name_here", $WORDPRESS_DB_NAME | `
        ForEach-Object { $_ -replace "username_here", $DB_USER } | `
        ForEach-Object { $_ -replace "password_here", $DB_PASSWORD } | `
        ForEach-Object { $_ -replace "localhost", $DB_HOST } | `
        Set-Content "wp-config.php"

    Write-Output "wp-config.php configured."
}

# Function to Install WordPress
function Install-WordPress {
    Write-Output "Installing WordPress..."
    & "$env:ProgramFiles\wp-cli.phar" core install --path="$TARGET_DIR" `
        --url="$WP_URL" `
        --title="$WP_TITLE" `
        --admin_user="$WP_ADMIN_USER" `
        --admin_password="$WP_ADMIN_PASS" `
        --admin_email="$WP_ADMIN_EMAIL" `
        --skip-email
    Write-Output "WordPress installed successfully!"
}

# Function to Clone Repositories and Install Applications
function Install-Applications {
    param (
        [string]$repoUrl,
        [string]$dirName
    )
    Write-Output "Cloning repository $repoUrl..."
    git clone $repoUrl
    Set-Location -Path "$TARGET_DIR\$dirName"

    Write-Output "Installing NPM packages..."
    npm install

    Write-Output "Installing PHP packages..."
    & "$XAMPP_INSTALL_DIRECTORY\php\php.exe" "$env:ProgramFiles\composer\composer.phar" update
    & "$XAMPP_INSTALL_DIRECTORY\php\php.exe" "$env:ProgramFiles\composer\composer.phar" install

    Write-Output "Fixing .env file..."
    Copy-Item -Path ".env.example" -Destination ".env"
    (Get-Content ".env") -replace "WORDPRESS_PATH=C:\\laragon\\www\\testskc", "WORDPRESS_PATH=C:\xampp\htdocs" | Set-Content ".env"
}

# Execute Functions
Install-Chocolatey
Install-XAMPP
Set-MySQLRootPassword
Setup-Node-Composer-WPCLI
Download-WordPress-And-Plugins
Create-Database -dbName $WORDPRESS_DB_NAME
Create-Database -dbName $TEAMPORTAL_DB_NAME
Create-Database -dbName $TCAPP_DB_NAME
Setup-WPConfigFile
Install-WordPress
Install-Applications -repoUrl "https://github.com/skcvolleybal/team-portal" -dirName "team-portal"
Install-Applications -repoUrl "https://github.com/skcvolleybal/tc-app" -dirName "tc-app"

Write-Output "All done! Run 'npm run ng serve' in /team-portal to start teamportal."
